# Data accumulated and condensed into day stats for each pool
type PoolDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to pool
  pool: Pool!
  # fees in USD
  feesUSD: BigDecimal!
}

# Data accumulated and condensed into day stats for all of Uniswap
type UniswapDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # total daily volume in Uniswap derived in terms of USD
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # number of daily transactions
  txCount: BigInt!
  #unique users count
  uniqueUsersCount: Int!
  uniqueTodayAccounts: [DayAccount!]! @derivedFrom(field: "dayId")
}

# Day + Account map
type DayAccount @entity{
  #(day number) + (account addr)
  id: ID!
  addr: String!
  # # timestamp rounded to current day by dividing by 86400
  # date: Int!
  count: Int!
  dayId: UniswapDayData!
}

# Day + Account + Pool map
type DayAccountPool @entity{
  #(day number) + (account addr) + (pool)
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  count: Int!
}


type Pool @entity {
  # pool address
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # block pool was created at
  createdAtBlockNumber: BigInt!
  # token0
  token0: Token!
  # token1
  token1: Token!
  # fee amount
  feeTier: BigInt!
  # in range liquidity
  liquidity: BigInt!
  # current price tracker
  sqrtPrice: BigInt!
  # token0 per token1
  token0Price: BigDecimal!
  # token1 per token0
  token1Price: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # total token 0 across all ticks
  totalValueLockedToken0: BigDecimal!
  # total token 1 across all ticks
  totalValueLockedToken1: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  # daily snapshots of pool data
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
}

type Token @entity {
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # token total supply
  totalSupply: BigInt!
  # transactions across all pools that include this token
  txCount: BigInt!
  # number of pools containing this token
  poolCount: BigInt!
  # derived price in USD
  tokenPriceUSD: BigDecimal!
  # pools token is in that are white listed for USD pricing
  stableCoinPools: [Pool!]!
}

# type User @entity{
#   #Account address + 
#   id: ID!
# }

# # # stores for USD calculations
# type Bundle @entity {
#   id: ID!
#   # price of ETH in usd
#   ethPriceUSD: BigDecimal!
# }
